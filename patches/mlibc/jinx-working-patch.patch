diff --git mlibc-clean/meson.build mlibc-workdir/meson.build
index dc894e2..e818d14 100644
--- mlibc-clean/meson.build
+++ mlibc-workdir/meson.build
@@ -218,6 +218,11 @@ elif host_machine.system() == 'dripos'
 	rtdl_include_dirs += include_directories('sysdeps/dripos/include')
 	libc_include_dirs += include_directories('sysdeps/dripos/include')
 	subdir('sysdeps/dripos')
+elif host_machine.system() == 'zigux'
+	disable_linux_option = true
+	rtdl_include_dirs += include_directories('sysdeps/zigux/include')
+	libc_include_dirs += include_directories('sysdeps/zigux/include')
+	subdir('sysdeps/zigux')
 else
 	error('No sysdeps defined for OS: ' + host_machine.system())
 endif
diff --git mlibc-workdir/sysdeps/zigux/generic/entry.cpp mlibc-workdir/sysdeps/zigux/generic/entry.cpp
new file mode 100644
index 0000000..bb3ed17
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/generic/entry.cpp
@@ -0,0 +1,21 @@
+#include <stdint.h>
+#include <stdlib.h>
+
+#include <mlibc/elf/startup.h>
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+void __mlibc_initLocale();
+
+static mlibc::exec_stack_data stack_data;
+
+extern "C" void __mlibc_entry(int (*main_fn)(int, char **, char **)) {
+    __mlibc_initLocale();
+
+    mlibc::parse_exec_stack(__dlapi_entrystack(), &stack_data);
+    mlibc::set_startup_data(stack_data.argc, stack_data.argv, stack_data.envp);
+
+    int result = main_fn(stack_data.argc, stack_data.argv, stack_data.envp);
+
+    exit(result);
+}
diff --git mlibc-workdir/sysdeps/zigux/generic/generic.cpp mlibc-workdir/sysdeps/zigux/generic/generic.cpp
new file mode 100644
index 0000000..714b9a7
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/generic/generic.cpp
@@ -0,0 +1,44 @@
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/debug.hpp>
+#include <zigux/syscall.h>
+
+#define UNIMPLEMENTED(x) { mlibc::panicLogger() << "Unimplemented sysdep: " << #x << frg::endlog; }
+
+namespace mlibc {
+
+void sys_libc_panic() {
+    mlibc::infoLogger() << "libc_panic" << frg::endlog;
+    sys_exit(1);
+}
+
+void sys_libc_log(const char *msg) {
+    do_syscall(SYS_libc_log, msg);
+}
+
+void sys_exit(int code) {
+    do_syscall(SYS_exit, code);
+}
+
+int sys_anon_allocate(size_t size, void **pointer) UNIMPLEMENTED(sys_anon_allocate)
+int sys_anon_free(void *pointer, size_t size) UNIMPLEMENTED(sys_anon_free)
+int sys_close(int fd) UNIMPLEMENTED(sys_close)
+int sys_futex_wait(int *pointer, int expected, const struct timespec *time) UNIMPLEMENTED(sys_futex_wait)
+int sys_futex_wake(int *pointer) UNIMPLEMENTED(sys_futex_wake)
+int sys_open(const char *filename, int flags, mode_t mode, int *fd) UNIMPLEMENTED(sys_open)
+int sys_open_dir(const char *path, int *handle) UNIMPLEMENTED(sys_open_dir)
+int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) UNIMPLEMENTED(sys_read)
+int sys_read_entries(int handle, void *buffer, size_t max_size, size_t *bytes_read) UNIMPLEMENTED(sys_read_entries)
+int sys_readlink(const char *path, void *buffer, size_t max_size, ssize_t *length) UNIMPLEMENTED(sys_readlink)
+int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) UNIMPLEMENTED(sys_seek)
+int sys_tcb_set(void *pointer) UNIMPLEMENTED(sys_tcb_set)
+int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd, off_t offset, void **window) UNIMPLEMENTED(sys_vm_map)
+
+#ifndef MLIBC_BUILDING_RTDL
+
+int sys_clock_get(int clock, time_t *secs, long *nanos) UNIMPLEMENTED(sys_clock_get)
+int sys_vm_unmap(void *address, size_t size) UNIMPLEMENTED(sys_vm_unmap)
+int sys_write(int fd, const void *buffer, size_t count, ssize_t *written) UNIMPLEMENTED(sys_write)
+
+#endif
+
+}
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/access.h mlibc-workdir/sysdeps/zigux/include/abi-bits/access.h
new file mode 120000
index 0000000..cb83931
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/access.h
@@ -0,0 +1 @@
+../../../../abis/linux/access.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/auxv.h mlibc-workdir/sysdeps/zigux/include/abi-bits/auxv.h
new file mode 120000
index 0000000..c43f878
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/linux/auxv.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/blkcnt_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/blkcnt_t.h
new file mode 120000
index 0000000..0b0ec27
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/blkcnt_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/blksize_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/blksize_t.h
new file mode 120000
index 0000000..7dc8d7c
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/blksize_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/clockid_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/clockid_t.h
new file mode 120000
index 0000000..6a42da5
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/clockid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/clockid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/dev_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/dev_t.h
new file mode 120000
index 0000000..bca881e
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/dev_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/epoll.h mlibc-workdir/sysdeps/zigux/include/abi-bits/epoll.h
new file mode 120000
index 0000000..eb4b76d
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/epoll.h
@@ -0,0 +1 @@
+../../../../abis/linux/epoll.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/errno.h mlibc-workdir/sysdeps/zigux/include/abi-bits/errno.h
new file mode 120000
index 0000000..6e507de
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/linux/errno.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/fcntl.h mlibc-workdir/sysdeps/zigux/include/abi-bits/fcntl.h
new file mode 120000
index 0000000..463e2c9
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/linux/fcntl.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/fsblkcnt_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/fsblkcnt_t.h
new file mode 120000
index 0000000..898dfb2
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/fsblkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/fsblkcnt_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/fsfilcnt_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/fsfilcnt_t.h
new file mode 120000
index 0000000..791755c
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/fsfilcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/fsfilcnt_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/gid_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/gid_t.h
new file mode 120000
index 0000000..abce6d6
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/gid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/in.h mlibc-workdir/sysdeps/zigux/include/abi-bits/in.h
new file mode 120000
index 0000000..418d1d5
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/linux/in.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/ino_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/ino_t.h
new file mode 120000
index 0000000..4c20aca
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/ino_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/inotify.h mlibc-workdir/sysdeps/zigux/include/abi-bits/inotify.h
new file mode 120000
index 0000000..b5cb282
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/inotify.h
@@ -0,0 +1 @@
+../../../../abis/linux/inotify.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/ioctls.h mlibc-workdir/sysdeps/zigux/include/abi-bits/ioctls.h
new file mode 120000
index 0000000..595106b
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/ioctls.h
@@ -0,0 +1 @@
+../../../../abis/linux/ioctls.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/limits.h mlibc-workdir/sysdeps/zigux/include/abi-bits/limits.h
new file mode 120000
index 0000000..6c88db2
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/limits.h
@@ -0,0 +1 @@
+../../../../abis/linux/limits.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/mode_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/mode_t.h
new file mode 120000
index 0000000..5d78fdf
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/mode_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/mqueue.h mlibc-workdir/sysdeps/zigux/include/abi-bits/mqueue.h
new file mode 120000
index 0000000..fa87b07
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/mqueue.h
@@ -0,0 +1 @@
+../../../../abis/linux/mqueue.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/msg.h mlibc-workdir/sysdeps/zigux/include/abi-bits/msg.h
new file mode 120000
index 0000000..f402b49
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/msg.h
@@ -0,0 +1 @@
+../../../../abis/linux/msg.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/nlink_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/nlink_t.h
new file mode 120000
index 0000000..bb3b625
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/nlink_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/packet.h mlibc-workdir/sysdeps/zigux/include/abi-bits/packet.h
new file mode 120000
index 0000000..998ef1a
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/packet.h
@@ -0,0 +1 @@
+../../../../abis/linux/packet.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/pid_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/pid_t.h
new file mode 120000
index 0000000..baa90f6
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/pid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/poll.h mlibc-workdir/sysdeps/zigux/include/abi-bits/poll.h
new file mode 120000
index 0000000..8ea6a0a
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/poll.h
@@ -0,0 +1 @@
+../../../../abis/linux/poll.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/ptrace.h mlibc-workdir/sysdeps/zigux/include/abi-bits/ptrace.h
new file mode 120000
index 0000000..b2517b2
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/ptrace.h
@@ -0,0 +1 @@
+../../../../abis/linux/ptrace.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/reboot.h mlibc-workdir/sysdeps/zigux/include/abi-bits/reboot.h
new file mode 120000
index 0000000..77013a4
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/reboot.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/resource.h mlibc-workdir/sysdeps/zigux/include/abi-bits/resource.h
new file mode 120000
index 0000000..88d7402
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/linux/resource.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/seek-whence.h mlibc-workdir/sysdeps/zigux/include/abi-bits/seek-whence.h
new file mode 120000
index 0000000..df7bccf
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/linux/seek-whence.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/shm.h mlibc-workdir/sysdeps/zigux/include/abi-bits/shm.h
new file mode 120000
index 0000000..067d8c4
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/shm.h
@@ -0,0 +1 @@
+../../../../abis/linux/shm.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/signal.h mlibc-workdir/sysdeps/zigux/include/abi-bits/signal.h
new file mode 120000
index 0000000..4dcb0b7
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/linux/signal.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/socket.h mlibc-workdir/sysdeps/zigux/include/abi-bits/socket.h
new file mode 120000
index 0000000..f1dc016
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/linux/socket.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/socklen_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/socklen_t.h
new file mode 120000
index 0000000..41f3b11
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/socklen_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/socklen_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/stat.h mlibc-workdir/sysdeps/zigux/include/abi-bits/stat.h
new file mode 120000
index 0000000..1f63b41
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/linux/stat.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/statfs.h mlibc-workdir/sysdeps/zigux/include/abi-bits/statfs.h
new file mode 120000
index 0000000..e3d202f
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/statfs.h
@@ -0,0 +1 @@
+../../../../abis/linux/statfs.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/statvfs.h mlibc-workdir/sysdeps/zigux/include/abi-bits/statvfs.h
new file mode 120000
index 0000000..1fc80c2
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/statvfs.h
@@ -0,0 +1 @@
+../../../../abis/linux/statvfs.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/suseconds_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/suseconds_t.h
new file mode 120000
index 0000000..9ed6597
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/suseconds_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/suseconds_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/termios.h mlibc-workdir/sysdeps/zigux/include/abi-bits/termios.h
new file mode 120000
index 0000000..ee8f0b0
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/linux/termios.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/time.h mlibc-workdir/sysdeps/zigux/include/abi-bits/time.h
new file mode 120000
index 0000000..2a02625
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/linux/time.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/uid_t.h mlibc-workdir/sysdeps/zigux/include/abi-bits/uid_t.h
new file mode 120000
index 0000000..b306777
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/uid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/utsname.h mlibc-workdir/sysdeps/zigux/include/abi-bits/utsname.h
new file mode 120000
index 0000000..b285754
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/utsname.h
@@ -0,0 +1 @@
+../../../../abis/linux/utsname.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/vm-flags.h mlibc-workdir/sysdeps/zigux/include/abi-bits/vm-flags.h
new file mode 120000
index 0000000..bbe258c
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/linux/vm-flags.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/wait.h mlibc-workdir/sysdeps/zigux/include/abi-bits/wait.h
new file mode 120000
index 0000000..feb2840
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/linux/wait.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/abi-bits/xattr.h mlibc-workdir/sysdeps/zigux/include/abi-bits/xattr.h
new file mode 120000
index 0000000..66412d7
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/abi-bits/xattr.h
@@ -0,0 +1 @@
+../../../../abis/linux/xattr.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/zigux/include/asm/ioctl.h mlibc-workdir/sysdeps/zigux/include/asm/ioctl.h
new file mode 100644
index 0000000..8cbb364
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/asm/ioctl.h
@@ -0,0 +1,105 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _ASM_GENERIC_IOCTL_H
+#define _ASM_GENERIC_IOCTL_H
+
+/* ioctl command encoding: 32 bits total, command in lower 16 bits,
+ * size of the parameter structure in the lower 14 bits of the
+ * upper 16 bits.
+ * Encoding the size of the parameter structure in the ioctl request
+ * is useful for catching programs compiled with old versions
+ * and to avoid overwriting user space outside the user buffer area.
+ * The highest 2 bits are reserved for indicating the ``access mode''.
+ * NOTE: This limits the max parameter size to 16kB -1 !
+ */
+
+/*
+ * The following is for compatibility across the various Linux
+ * platforms.  The generic ioctl numbering scheme doesn't really enforce
+ * a type field.  De facto, however, the top 8 bits of the lower 16
+ * bits are indeed used as a type field, so we might just as well make
+ * this explicit here.  Please be sure to use the decoding macros
+ * below from now on.
+ */
+#define _IOC_NRBITS	8
+#define _IOC_TYPEBITS	8
+
+/*
+ * Let any architecture override either of the following before
+ * including this file.
+ */
+
+#ifndef _IOC_SIZEBITS
+# define _IOC_SIZEBITS	14
+#endif
+
+#ifndef _IOC_DIRBITS
+# define _IOC_DIRBITS	2
+#endif
+
+#define _IOC_NRMASK	((1 << _IOC_NRBITS)-1)
+#define _IOC_TYPEMASK	((1 << _IOC_TYPEBITS)-1)
+#define _IOC_SIZEMASK	((1 << _IOC_SIZEBITS)-1)
+#define _IOC_DIRMASK	((1 << _IOC_DIRBITS)-1)
+
+#define _IOC_NRSHIFT	0
+#define _IOC_TYPESHIFT	(_IOC_NRSHIFT+_IOC_NRBITS)
+#define _IOC_SIZESHIFT	(_IOC_TYPESHIFT+_IOC_TYPEBITS)
+#define _IOC_DIRSHIFT	(_IOC_SIZESHIFT+_IOC_SIZEBITS)
+
+/*
+ * Direction bits, which any architecture can choose to override
+ * before including this file.
+ *
+ * NOTE: _IOC_WRITE means userland is writing and kernel is
+ * reading. _IOC_READ means userland is reading and kernel is writing.
+ */
+
+#ifndef _IOC_NONE
+# define _IOC_NONE	0U
+#endif
+
+#ifndef _IOC_WRITE
+# define _IOC_WRITE	1U
+#endif
+
+#ifndef _IOC_READ
+# define _IOC_READ	2U
+#endif
+
+#define _IOC(dir,type,nr,size) \
+	(((dir)  << _IOC_DIRSHIFT) | \
+	 ((type) << _IOC_TYPESHIFT) | \
+	 ((nr)   << _IOC_NRSHIFT) | \
+	 ((size) << _IOC_SIZESHIFT))
+
+#define _IOC_TYPECHECK(t) (sizeof(t))
+
+/*
+ * Used to create numbers.
+ *
+ * NOTE: _IOW means userland is writing and kernel is reading. _IOR
+ * means userland is reading and kernel is writing.
+ */
+#define _IO(type,nr)		_IOC(_IOC_NONE,(type),(nr),0)
+#define _IOR(type,nr,size)	_IOC(_IOC_READ,(type),(nr),(_IOC_TYPECHECK(size)))
+#define _IOW(type,nr,size)	_IOC(_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))
+#define _IOWR(type,nr,size)	_IOC(_IOC_READ|_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))
+#define _IOR_BAD(type,nr,size)	_IOC(_IOC_READ,(type),(nr),sizeof(size))
+#define _IOW_BAD(type,nr,size)	_IOC(_IOC_WRITE,(type),(nr),sizeof(size))
+#define _IOWR_BAD(type,nr,size)	_IOC(_IOC_READ|_IOC_WRITE,(type),(nr),sizeof(size))
+
+/* used to decode ioctl numbers.. */
+#define _IOC_DIR(nr)		(((nr) >> _IOC_DIRSHIFT) & _IOC_DIRMASK)
+#define _IOC_TYPE(nr)		(((nr) >> _IOC_TYPESHIFT) & _IOC_TYPEMASK)
+#define _IOC_NR(nr)		(((nr) >> _IOC_NRSHIFT) & _IOC_NRMASK)
+#define _IOC_SIZE(nr)		(((nr) >> _IOC_SIZESHIFT) & _IOC_SIZEMASK)
+
+/* ...and for the drivers/sound files... */
+
+#define IOC_IN		(_IOC_WRITE << _IOC_DIRSHIFT)
+#define IOC_OUT		(_IOC_READ << _IOC_DIRSHIFT)
+#define IOC_INOUT	((_IOC_WRITE|_IOC_READ) << _IOC_DIRSHIFT)
+#define IOCSIZE_MASK	(_IOC_SIZEMASK << _IOC_SIZESHIFT)
+#define IOCSIZE_SHIFT	(_IOC_SIZESHIFT)
+
+#endif /* _ASM_GENERIC_IOCTL_H */
diff --git mlibc-workdir/sysdeps/zigux/include/asm/ioctls.h mlibc-workdir/sysdeps/zigux/include/asm/ioctls.h
new file mode 100644
index 0000000..bdbba9b
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/asm/ioctls.h
@@ -0,0 +1,121 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef __ASM_GENERIC_IOCTLS_H
+#define __ASM_GENERIC_IOCTLS_H
+
+#include <asm/ioctl.h>
+
+/*
+ * These are the most common definitions for tty ioctl numbers.
+ * Most of them do not use the recommended _IOC(), but there is
+ * probably some source code out there hardcoding the number,
+ * so we might as well use them for all new platforms.
+ *
+ * The architectures that use different values here typically
+ * try to be compatible with some Unix variants for the same
+ * architecture.
+ */
+
+/* 0x54 is just a magic number to make these relatively unique ('T') */
+
+#define TCGETS		0x5401
+#define TCSETS		0x5402
+#define TCSETSW		0x5403
+#define TCSETSF		0x5404
+#define TCGETA		0x5405
+#define TCSETA		0x5406
+#define TCSETAW		0x5407
+#define TCSETAF		0x5408
+#define TCSBRK		0x5409
+#define TCXONC		0x540A
+#define TCFLSH		0x540B
+#define TIOCEXCL	0x540C
+#define TIOCNXCL	0x540D
+#define TIOCSCTTY	0x540E
+#define TIOCGPGRP	0x540F
+#define TIOCSPGRP	0x5410
+#define TIOCOUTQ	0x5411
+#define TIOCSTI		0x5412
+#define TIOCGWINSZ	0x5413
+#define TIOCSWINSZ	0x5414
+#define TIOCMGET	0x5415
+#define TIOCMBIS	0x5416
+#define TIOCMBIC	0x5417
+#define TIOCMSET	0x5418
+#define TIOCGSOFTCAR	0x5419
+#define TIOCSSOFTCAR	0x541A
+#define FIONREAD	0x541B
+#define TIOCINQ		FIONREAD
+#define TIOCLINUX	0x541C
+#define TIOCCONS	0x541D
+#define TIOCGSERIAL	0x541E
+#define TIOCSSERIAL	0x541F
+#define TIOCPKT		0x5420
+#define FIONBIO		0x5421
+#define TIOCNOTTY	0x5422
+#define TIOCSETD	0x5423
+#define TIOCGETD	0x5424
+#define TCSBRKP		0x5425	/* Needed for POSIX tcsendbreak() */
+#define TIOCSBRK	0x5427  /* BSD compatibility */
+#define TIOCCBRK	0x5428  /* BSD compatibility */
+#define TIOCGSID	0x5429  /* Return the session ID of FD */
+#define TCGETS2		_IOR('T', 0x2A, struct termios2)
+#define TCSETS2		_IOW('T', 0x2B, struct termios2)
+#define TCSETSW2	_IOW('T', 0x2C, struct termios2)
+#define TCSETSF2	_IOW('T', 0x2D, struct termios2)
+#define TIOCGRS485	0x542E
+#ifndef TIOCSRS485
+#define TIOCSRS485	0x542F
+#endif
+#define TIOCGPTN	_IOR('T', 0x30, unsigned int) /* Get Pty Number (of pty-mux device) */
+#define TIOCSPTLCK	_IOW('T', 0x31, int)  /* Lock/unlock Pty */
+#define TIOCGDEV	_IOR('T', 0x32, unsigned int) /* Get primary device node of /dev/console */
+#define TCGETX		0x5432 /* SYS5 TCGETX compatibility */
+#define TCSETX		0x5433
+#define TCSETXF		0x5434
+#define TCSETXW		0x5435
+#define TIOCSIG		_IOW('T', 0x36, int)  /* pty: generate signal */
+#define TIOCVHANGUP	0x5437
+#define TIOCGPKT	_IOR('T', 0x38, int) /* Get packet mode state */
+#define TIOCGPTLCK	_IOR('T', 0x39, int) /* Get Pty lock state */
+#define TIOCGEXCL	_IOR('T', 0x40, int) /* Get exclusive mode state */
+#define TIOCGPTPEER	_IO('T', 0x41) /* Safely open the slave */
+#define TIOCGISO7816	_IOR('T', 0x42, struct serial_iso7816)
+#define TIOCSISO7816	_IOWR('T', 0x43, struct serial_iso7816)
+
+#define FIONCLEX	0x5450
+#define FIOCLEX		0x5451
+#define FIOASYNC	0x5452
+#define TIOCSERCONFIG	0x5453
+#define TIOCSERGWILD	0x5454
+#define TIOCSERSWILD	0x5455
+#define TIOCGLCKTRMIOS	0x5456
+#define TIOCSLCKTRMIOS	0x5457
+#define TIOCSERGSTRUCT	0x5458 /* For debugging only */
+#define TIOCSERGETLSR   0x5459 /* Get line status register */
+#define TIOCSERGETMULTI 0x545A /* Get multiport config  */
+#define TIOCSERSETMULTI 0x545B /* Set multiport config */
+
+#define TIOCMIWAIT	0x545C	/* wait for a change on serial input line(s) */
+#define TIOCGICOUNT	0x545D	/* read serial port __inline__ interrupt counts */
+
+/*
+ * Some arches already define FIOQSIZE due to a historical
+ * conflict with a Hayes modem-specific ioctl value.
+ */
+#ifndef FIOQSIZE
+# define FIOQSIZE	0x5460
+#endif
+
+/* Used for packet mode */
+#define TIOCPKT_DATA		 0
+#define TIOCPKT_FLUSHREAD	 1
+#define TIOCPKT_FLUSHWRITE	 2
+#define TIOCPKT_STOP		 4
+#define TIOCPKT_START		 8
+#define TIOCPKT_NOSTOP		16
+#define TIOCPKT_DOSTOP		32
+#define TIOCPKT_IOCTL		64
+
+#define TIOCSER_TEMT	0x01	/* Transmitter physically empty */
+
+#endif /* __ASM_GENERIC_IOCTLS_H */
diff --git mlibc-workdir/sysdeps/zigux/include/zigux/syscall.h mlibc-workdir/sysdeps/zigux/include/zigux/syscall.h
new file mode 100644
index 0000000..03e8b35
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/include/zigux/syscall.h
@@ -0,0 +1,146 @@
+#ifndef _ZIGUX__SYSCALL_H
+#define _ZIGUX__SYSCALL_H
+
+#include <stdint.h>
+
+#define SYS_libc_log 0
+#define SYS_exit 1
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+inline uint64_t syscall_0(uint64_t n) {
+    uint64_t res;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_1(uint64_t n, uint64_t a) {
+    uint64_t res;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_2(uint64_t n, uint64_t a, uint64_t b) {
+    uint64_t res;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a), "S" (b)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_3(uint64_t n, uint64_t a, uint64_t b, uint64_t c) {
+    uint64_t res;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a), "S" (b), "d" (c)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_4(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d) {
+    uint64_t res;
+    register uint64_t r10 asm("r10") = d;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a), "S" (b), "d" (c), "r" (r10)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_5(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d, uint64_t e) {
+    uint64_t res;
+    register uint64_t r10 asm("r10") = d;
+    register uint64_t r8 asm("r8") = e;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a), "S" (b), "d" (c), "r" (r10), "r" (r8)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_6(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d, uint64_t e, uint64_t f) {
+    uint64_t res;
+    register uint64_t r10 asm("r10") = d;
+    register uint64_t r8 asm("r8") = e;
+    register uint64_t r9 asm("r9") = f;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a), "S" (b), "d" (c), "r" (r10), "r" (r8), "r" (r9)
+        : "memory"
+    );
+    return res;
+}
+
+#ifdef __cplusplus
+}
+
+inline uint64_t do_syscall(uint64_t n) {
+    return syscall_0(n);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a) {
+    return syscall_1(n, a);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a, uint64_t b) {
+    return syscall_2(n, a, b);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a, uint64_t b, uint64_t c) {
+    return syscall_3(n, a, b, c);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d) {
+    return syscall_4(n, a, b, c, d);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d, uint64_t e)  {
+    return syscall_5(n, a, b, c, d, e);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d, uint64_t e, uint64_t f)  {
+    return syscall_6(n, a, b, c, d, e, f);
+}
+
+template <typename... T>
+inline uint64_t do_syscall(uint64_t n, T... a){
+    return do_syscall(n, (uint64_t)(a)...);
+}
+
+inline int syscall_error(uint64_t ret) {
+    if((uint64_t)ret > -4096UL)
+        return -(int64_t)ret;
+
+    return 0;
+}
+
+template <typename T>
+inline T syscall_result(uint64_t res) {
+    return (int64_t)res;
+}
+
+#endif // __cplusplus
+
+#endif
diff --git mlibc-workdir/sysdeps/zigux/meson.build mlibc-workdir/sysdeps/zigux/meson.build
new file mode 100644
index 0000000..5b76703
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/meson.build
@@ -0,0 +1,96 @@
+rtdl_sources += files(
+	'generic/generic.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp',
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/reboot.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/access.h',
+		'include/abi-bits/wait.h',
+		'include/abi-bits/limits.h',
+		'include/abi-bits/utsname.h',
+		'include/abi-bits/ptrace.h',
+		'include/abi-bits/poll.h',
+		'include/abi-bits/epoll.h',
+		'include/abi-bits/packet.h',
+		'include/abi-bits/inotify.h',
+		'include/abi-bits/clockid_t.h',
+		'include/abi-bits/shm.h',
+		'include/abi-bits/mqueue.h',
+		'include/abi-bits/suseconds_t.h',
+		'include/abi-bits/fsfilcnt_t.h',
+		'include/abi-bits/fsblkcnt_t.h',
+		'include/abi-bits/socklen_t.h',
+		'include/abi-bits/statfs.h',
+		'include/abi-bits/statvfs.h',
+		'include/abi-bits/ioctls.h',
+		'include/abi-bits/xattr.h',
+		subdir: 'abi-bits',
+	)
+
+	install_headers(
+	    'include/asm/ioctl.h',
+	    'include/asm/ioctls.h',
+	    subdir: 'asm',
+	)
+
+	install_headers(
+		'include/zigux/syscall.h',
+		subdir: 'zigux',
+	)
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: host_machine.cpu_family() / 'crt-src/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir'),
+	)
+
+	custom_target('crti',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: host_machine.cpu_family() / 'crt-src/crti.S',
+		output: 'crti.o',
+		install: true,
+		install_dir: get_option('libdir'),
+	)
+
+	custom_target('crtn',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: host_machine.cpu_family() / 'crt-src/crtn.S',
+		output: 'crtn.o',
+		install: true,
+		install_dir: get_option('libdir'),
+	)
+endif
diff --git mlibc-workdir/sysdeps/zigux/x86_64/crt-src/crt0.S mlibc-workdir/sysdeps/zigux/x86_64/crt-src/crt0.S
new file mode 100644
index 0000000..5ad3636
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/x86_64/crt-src/crt0.S
@@ -0,0 +1,8 @@
+.section .text
+.global _start
+
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
+
+.section .note.GNU-stack,"",%progbits
diff --git mlibc-workdir/sysdeps/zigux/x86_64/crt-src/crti.S mlibc-workdir/sysdeps/zigux/x86_64/crt-src/crti.S
new file mode 100644
index 0000000..6d01b69
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/x86_64/crt-src/crti.S
@@ -0,0 +1,13 @@
+.section .init
+.global _init
+
+_init:
+	push %rax
+
+.section .fini
+.global _fini
+
+_fini:
+	push %rax
+
+.section .note.GNU-stack,"",%progbits
diff --git mlibc-workdir/sysdeps/zigux/x86_64/crt-src/crtn.S mlibc-workdir/sysdeps/zigux/x86_64/crt-src/crtn.S
new file mode 100644
index 0000000..a947906
--- /dev/null
+++ mlibc-workdir/sysdeps/zigux/x86_64/crt-src/crtn.S
@@ -0,0 +1,9 @@
+.section .init
+	pop %rax
+	ret
+
+.section .fini
+	pop %rax
+	ret
+
+.section .note.GNU-stack,"",%progbits
