diff --git a/abis/zigux/auxv.h b/abis/zigux/auxv.h
new file mode 100644
index 0000000..3003eae
--- /dev/null
+++ b/abis/zigux/auxv.h
@@ -0,0 +1,11 @@
+#ifndef _ABI_BITS_AUXV_H
+#define _ABI_BITS_AUXV_H
+
+#define AT_PHDR 3
+#define AT_PHENT 4
+#define AT_PHNUM 5
+#define AT_ENTRY 9
+#define AT_RANDOM 25
+#define AT_EXECFN 31
+
+#endif
diff --git a/meson.build b/meson.build
index 6c1103d..4eeba4d 100644
--- a/meson.build
+++ b/meson.build
@@ -136,6 +136,11 @@ elif host_machine.system() == 'dripos'
 	rtdl_include_dirs += include_directories('sysdeps/dripos/include')
 	libc_include_dirs += include_directories('sysdeps/dripos/include')
 	subdir('sysdeps/dripos')
+elif host_machine.system() == 'zigux'
+	disable_linux_option = false
+	rtdl_include_dirs += include_directories('sysdeps/zigux/include')
+	libc_include_dirs += include_directories('sysdeps/zigux/include')
+	subdir('sysdeps/zigux')
 else
 	error('No sysdeps defined for OS: ' + host_machine.system())
 endif
diff --git a/sysdeps/zigux/include/abi-bits/abi.h b/sysdeps/zigux/include/abi-bits/abi.h
new file mode 120000
index 0000000..c945860
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/abi.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/abi.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/auxv.h b/sysdeps/zigux/include/abi-bits/auxv.h
new file mode 120000
index 0000000..c7ae11f
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/zigux/auxv.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/blkcnt_t.h b/sysdeps/zigux/include/abi-bits/blkcnt_t.h
new file mode 120000
index 0000000..e9d9f1b
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/blksize_t.h b/sysdeps/zigux/include/abi-bits/blksize_t.h
new file mode 120000
index 0000000..c6dfb6e
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blksize_t.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/dev_t.h b/sysdeps/zigux/include/abi-bits/dev_t.h
new file mode 120000
index 0000000..0c1143b
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/dev_t.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/errno.h b/sysdeps/zigux/include/abi-bits/errno.h
new file mode 120000
index 0000000..589859f
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/errno.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/fcntl.h b/sysdeps/zigux/include/abi-bits/fcntl.h
new file mode 120000
index 0000000..ea5323a
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/fcntl.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/gid_t.h b/sysdeps/zigux/include/abi-bits/gid_t.h
new file mode 120000
index 0000000..6a77218
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/gid_t.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/in.h b/sysdeps/zigux/include/abi-bits/in.h
new file mode 120000
index 0000000..b58c683
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/in.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/ino_t.h b/sysdeps/zigux/include/abi-bits/ino_t.h
new file mode 120000
index 0000000..10d644e
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/ino_t.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/limits.h b/sysdeps/zigux/include/abi-bits/limits.h
new file mode 120000
index 0000000..1aa5894
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/limits.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/limits.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/mode_t.h b/sysdeps/zigux/include/abi-bits/mode_t.h
new file mode 120000
index 0000000..29d7733
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/mode_t.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/nlink_t.h b/sysdeps/zigux/include/abi-bits/nlink_t.h
new file mode 120000
index 0000000..7618c27
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/nlink_t.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/pid_t.h b/sysdeps/zigux/include/abi-bits/pid_t.h
new file mode 120000
index 0000000..3fd26a7
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/pid_t.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/reboot.h b/sysdeps/zigux/include/abi-bits/reboot.h
new file mode 120000
index 0000000..ecc3ddb
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/x86_64/reboot.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/resource.h b/sysdeps/zigux/include/abi-bits/resource.h
new file mode 120000
index 0000000..3e59c75
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/resource.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/seek-whence.h b/sysdeps/zigux/include/abi-bits/seek-whence.h
new file mode 120000
index 0000000..3bd41ef
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/seek-whence.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/signal.h b/sysdeps/zigux/include/abi-bits/signal.h
new file mode 120000
index 0000000..b20e511
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/signal.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/socket.h b/sysdeps/zigux/include/abi-bits/socket.h
new file mode 120000
index 0000000..0e1d6be
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/socket.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/stat.h b/sysdeps/zigux/include/abi-bits/stat.h
new file mode 120000
index 0000000..82642c3
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/stat.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/termios.h b/sysdeps/zigux/include/abi-bits/termios.h
new file mode 120000
index 0000000..cfcfe76
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/termios.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/time.h b/sysdeps/zigux/include/abi-bits/time.h
new file mode 120000
index 0000000..97f3d52
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/time.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/uid_t.h b/sysdeps/zigux/include/abi-bits/uid_t.h
new file mode 120000
index 0000000..1113eba
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/uid_t.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/utsname.h b/sysdeps/zigux/include/abi-bits/utsname.h
new file mode 120000
index 0000000..17b993f
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/utsname.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/utsname.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/vm-flags.h b/sysdeps/zigux/include/abi-bits/vm-flags.h
new file mode 120000
index 0000000..f1a985e
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/vm-flags.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/abi-bits/wait.h b/sysdeps/zigux/include/abi-bits/wait.h
new file mode 120000
index 0000000..6d911c7
--- /dev/null
+++ b/sysdeps/zigux/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/wait.h
\ No newline at end of file
diff --git a/sysdeps/zigux/include/zigux/syscall.h b/sysdeps/zigux/include/zigux/syscall.h
new file mode 100644
index 0000000..5ca2685
--- /dev/null
+++ b/sysdeps/zigux/include/zigux/syscall.h
@@ -0,0 +1,164 @@
+#ifndef _SYSCALL_H
+#define _SYSCALL_H
+
+#include <stdint.h>
+
+#define SYS_PROC_EXIT 0x0
+#define SYS_PROC_LOG 0x1
+#define SYS_PROC_ARCH_CTL 0x2
+#define SYS_PROC_GET_PID 0x3
+#define SYS_PROC_GET_PPID 0x4
+#define SYS_PROC_FORK 0x5
+#define SYS_PROC_EXEC 0x6
+#define SYS_PROC_WAIT 0x7
+
+#define SYS_FILE_OPEN 0x100
+#define SYS_FILE_CLOSE 0x101
+#define SYS_FILE_READ 0x102
+#define SYS_FILE_WRITE 0x103
+#define SYS_FILE_SEEK 0x104
+#define SYS_FILE_GET_CWD 0x105
+#define SYS_FILE_STAT 0x106
+#define SYS_FILE_IO_CONTROL 0x107
+
+#define SYS_MEM_MAP 0x200
+#define SYS_MEM_UNMAP 0x201
+#define SYS_MEM_PROTECT 0x202
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+inline uint64_t syscall_0(uint64_t n) {
+    uint64_t res;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_1(uint64_t n, uint64_t a) {
+    uint64_t res;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_2(uint64_t n, uint64_t a, uint64_t b) {
+    uint64_t res;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a), "S" (b)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_3(uint64_t n, uint64_t a, uint64_t b, uint64_t c) {
+    uint64_t res;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a), "S" (b), "d" (c)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_4(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d) {
+    uint64_t res;
+    register uint64_t r10 asm("r10") = d;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a), "S" (b), "d" (c), "r" (r10)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_5(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d, uint64_t e) {
+    uint64_t res;
+    register uint64_t r10 asm("r10") = d;
+    register uint64_t r8 asm("r8") = e;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a), "S" (b), "d" (c), "r" (r10), "r" (r8)
+        : "memory"
+    );
+    return res;
+}
+
+inline uint64_t syscall_6(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d, uint64_t e, uint64_t f) {
+    uint64_t res;
+    register uint64_t r10 asm("r10") = d;
+    register uint64_t r8 asm("r8") = e;
+    register uint64_t r9 asm("r9") = f;
+    asm volatile(
+        "int $0xfd"
+        : "=a" (res)
+        : "a" (n), "D" (a), "S" (b), "d" (c), "r" (r10), "r" (r8), "r" (r9)
+        : "memory"
+    );
+    return res;
+}
+
+#ifdef __cplusplus
+}
+
+inline uint64_t do_syscall(uint64_t n) {
+    return syscall_0(n);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a) {
+    return syscall_1(n, a);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a, uint64_t b) {
+    return syscall_2(n, a, b);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a, uint64_t b, uint64_t c) {
+    return syscall_3(n, a, b, c);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d) {
+    return syscall_4(n, a, b, c, d);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d, uint64_t e)  {
+    return syscall_5(n, a, b, c, d, e);
+}
+
+inline uint64_t do_syscall(uint64_t n, uint64_t a, uint64_t b, uint64_t c, uint64_t d, uint64_t e, uint64_t f)  {
+    return syscall_6(n, a, b, c, d, e, f);
+}
+
+template <typename... T>
+inline uint64_t do_syscall(uint64_t n, T... a){
+    return do_syscall(n, (uint64_t)(a)...);
+}
+
+inline int syscall_error(uint64_t ret) {
+    if((uint64_t)ret > -4096UL)
+        return -(int64_t)ret;
+
+    return 0;
+}
+
+template <typename T>
+inline T syscall_result(uint64_t res) {
+    return (int64_t)res;
+}
+
+#endif // __cplusplus
+#endif // _SYSCALL_H
diff --git a/sysdeps/zigux/meson.build b/sysdeps/zigux/meson.build
new file mode 100644
index 0000000..0c265e5
--- /dev/null
+++ b/sysdeps/zigux/meson.build
@@ -0,0 +1,55 @@
+rtdl_sources += files(
+	'src/sysdeps.cpp',
+)
+
+libc_sources += files(
+	'src/entry.cpp',
+	'src/sysdeps.cpp',
+)
+
+if not no_headers
+    install_headers(
+		'include/abi-bits/abi.h',
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/limits.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/utsname.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/wait.h',
+		subdir: 'abi-bits',
+	)
+
+	install_headers(
+		'include/zigux/syscall.h',
+		subdir: 'zigux',
+	)
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: 'src/crt0-x86_64.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir'),
+		build_by_default: true,
+	)
+endif
diff --git a/sysdeps/zigux/src/crt0-x86_64.S b/sysdeps/zigux/src/crt0-x86_64.S
new file mode 100644
index 0000000..93d47f1
--- /dev/null
+++ b/sysdeps/zigux/src/crt0-x86_64.S
@@ -0,0 +1,7 @@
+.section .text
+
+.global _start
+
+_start:
+    lea main(%rip), %rdi
+    call mlibc_entry
diff --git a/sysdeps/zigux/src/entry.cpp b/sysdeps/zigux/src/entry.cpp
new file mode 100644
index 0000000..23d499c
--- /dev/null
+++ b/sysdeps/zigux/src/entry.cpp
@@ -0,0 +1,24 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <mlibc/elf/startup.h>
+
+extern char **environ;
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+void __mlibc_initLocale();
+
+static mlibc::exec_stack_data stack_data;
+
+__attribute__((constructor)) static void mlibc_init() {
+  __mlibc_initLocale();
+
+  mlibc::parse_exec_stack(__dlapi_entrystack(), &stack_data);
+  mlibc::set_startup_data(stack_data.argc, stack_data.argv, stack_data.envp);
+}
+
+extern "C" void mlibc_entry(int (*main_fn)(int, char **, char **)) {
+  int result = main_fn(stack_data.argc, stack_data.argv, environ);
+
+  exit(result);
+}
diff --git a/sysdeps/zigux/src/sysdeps.cpp b/sysdeps/zigux/src/sysdeps.cpp
new file mode 100644
index 0000000..09a396a
--- /dev/null
+++ b/sysdeps/zigux/src/sysdeps.cpp
@@ -0,0 +1,303 @@
+#include <errno.h>
+#include <fcntl.h>
+#include <stddef.h>
+#include <abi-bits/seek-whence.h>
+#include <abi-bits/stat.h>
+#include <abi-bits/vm-flags.h>
+#include <bits/off_t.h>
+#include <bits/ssize_t.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/fsfd_target.hpp>
+#include <mlibc/posix-sysdeps.hpp>
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <zigux/syscall.h>
+
+const auto ARCH_SET_GS = 0x1001;
+const auto ARCH_SET_FS = 0x1002;
+const auto ARCH_GET_FS = 0x1003;
+const auto ARCH_GET_GS = 0x1004;
+
+#define STUB_IMPL(name) { sys_libc_log("Stub function " #name " was called"); sys_libc_panic(); }
+
+namespace mlibc {
+
+[[noreturn]] void sys_exit(int code) {
+    do_syscall(SYS_PROC_EXIT, code);
+}
+
+void sys_libc_log(const char *message) {
+    do_syscall(SYS_PROC_LOG, message);
+}
+
+[[noreturn]] void sys_libc_panic() {
+    sys_libc_log("mlibc panic!");
+    sys_exit(1);
+}
+
+int sys_tcb_set(void *pointer) {
+    auto res = do_syscall(SYS_PROC_ARCH_CTL, ARCH_SET_FS, pointer);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    return 0;
+}
+
+int sys_futex_wait(int *pointer, int expected, const struct timespec *time) STUB_IMPL(sys_futex_wait)
+int sys_futex_wake(int *pointer) STUB_IMPL(sys_futex_wake)
+
+int sys_anon_allocate(size_t size, void **pointer) {
+    return sys_vm_map(nullptr, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0, pointer);
+}
+
+int sys_anon_free(void *pointer, size_t size) {
+    return sys_vm_unmap(pointer, size);
+}
+
+int sys_open(const char *pathname, int flags, int *fd) {
+    auto res = do_syscall(SYS_FILE_OPEN, pathname, flags);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    *fd = syscall_result<int>(res);
+
+    return 0;
+}
+
+int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+    auto res = do_syscall(SYS_FILE_READ, fd, buf, count);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    *bytes_read = syscall_result<uint64_t>(res);
+
+    return 0;
+}
+
+int sys_write(int fd, const void *buf, size_t count, ssize_t *bytes_written) {
+    auto res = do_syscall(SYS_FILE_WRITE, fd, buf, count);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    *bytes_written = syscall_result<uint64_t>(res);
+
+    return 0;
+}
+
+int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+    auto res = do_syscall(SYS_FILE_SEEK, fd, offset, whence);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    *new_offset = syscall_result<uint64_t>(res);
+
+    return 0;
+}
+
+int sys_close(int fd) {
+    auto res = do_syscall(SYS_FILE_CLOSE, fd);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    return 0;
+}
+
+int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd, off_t offset, void **window) {
+    auto res = do_syscall(SYS_MEM_MAP, hint, size, prot, flags, fd, offset);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    *window = (void*)syscall_result<uint64_t>(res);
+
+    return 0;
+}
+
+int sys_vm_unmap(void *pointer, size_t size) {
+    auto res = do_syscall(SYS_MEM_UNMAP, pointer, size);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    return 0;
+}
+
+int sys_clock_get(int clock, time_t *secs, long *nanos) {
+    *secs = 0;
+    *nanos = 0;
+
+    return 0;
+}
+
+gid_t sys_getgid() {
+    mlibc::infoLogger() << "sys_getgid() is not implemented" << frg::endlog;
+    return 0;
+}
+
+gid_t sys_getegid() {
+    mlibc::infoLogger() << "sys_getegid() is not implemented" << frg::endlog;
+    return 0;
+}
+
+uid_t sys_getuid() {
+    mlibc::infoLogger() << "sys_getuid() is not implemented" << frg::endlog;
+    return 0;
+}
+
+uid_t sys_geteuid() {
+    mlibc::infoLogger() << "sys_geteuid() is not implemented" << frg::endlog;
+    return 0;
+}
+
+pid_t sys_getpid() {
+    return syscall_result<pid_t>(do_syscall(SYS_PROC_GET_PID));
+}
+
+pid_t sys_getppid() {
+    return syscall_result<pid_t>(do_syscall(SYS_PROC_GET_PPID));
+}
+
+pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
+    mlibc::infoLogger() << "sys_getpgid() is not implemented" << frg::endlog;
+    *pgid = 0;
+    return 0;
+}
+
+int sys_setgid(gid_t gid) {
+    mlibc::infoLogger() << "sys_setgid() is not implemented" << frg::endlog;
+    return 0;
+}
+
+int sys_setegid(gid_t egid) {
+    mlibc::infoLogger() << "sys_setegid() is not implemented" << frg::endlog;
+    return 0;
+}
+
+int sys_setuid(uid_t uid) {
+    mlibc::infoLogger() << "sys_setuid() is not implemented" << frg::endlog;
+    return 0;
+}
+
+int sys_seteuid(uid_t euid) {
+    mlibc::infoLogger() << "sys_seteuid() is not implemented" << frg::endlog;
+    return 0;
+}
+
+int sys_getcwd(char *buffer, size_t size) {
+    auto result = do_syscall(SYS_FILE_GET_CWD, buffer, size);
+
+    if (auto err = syscall_error(result))
+        return err;
+
+    return 0;
+}
+
+int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat *statbuf) {
+    mlibc::infoLogger() << "sys_stat() is not implemented" << frg::endlog;
+    memset(statbuf, 0, sizeof(*statbuf));
+    return 0;
+}
+
+int sys_pselect(int num_fds, fd_set *read_set, fd_set *write_set, fd_set *except_set, const struct timespec *timeout, const sigset_t *sigmask, int *num_events) {
+    mlibc::infoLogger() << "sys_pselect() is not implemented" << frg::endlog;
+    *num_events = 0;
+    return 0;
+}
+
+int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+    auto res = do_syscall(SYS_FILE_IO_CONTROL, fd, request, arg);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    if (result)
+        *result = syscall_result<int>(res);
+
+    return 0;
+}
+
+int sys_isatty(int fd) {
+    struct winsize ws;
+          
+    if (!sys_ioctl(fd, TIOCGWINSZ, &ws, nullptr))
+        return 0;
+
+    return ENOTTY;
+}
+
+int sys_tcgetattr(int fd, struct termios *attr) {  
+    if (auto err = sys_ioctl(fd, TCGETS, attr, nullptr))
+        return err;
+
+    return 0;
+}
+
+int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
+	int request;
+
+	switch (optional_action) {
+		case TCSANOW: request = TCSETS; break;
+		case TCSADRAIN: request = TCSETSW; break;
+		case TCSAFLUSH: request = TCSETSF; break;
+		default: return EINVAL;
+	}
+
+    if (auto err = sys_ioctl(fd, request, (void*) attr, nullptr))
+        return err;
+
+    return 0;
+}
+
+int sys_fork(pid_t *child) {
+    auto res = do_syscall(SYS_PROC_FORK);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    *child = syscall_result<pid_t>(res);
+
+    return 0;
+}
+
+int sys_execve(const char *path, char *const *argv, char *const *envp) {
+    auto res = do_syscall(SYS_PROC_EXEC, path, argv, envp);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    sys_libc_log("execve() returned");
+    sys_libc_panic();
+}
+
+int sys_sigaction(int, const struct sigaction *__restrict, struct sigaction *__restrict) {
+    return ENOSYS;
+}
+
+int sys_sigprocmask(int how, const sigset_t *__restrict set, sigset_t *__restrict retrieve) {
+    return ENOSYS;
+}
+
+int sys_waitpid(pid_t pid, int *status, int flags, pid_t *ret_pid) {
+    auto res = do_syscall(SYS_PROC_WAIT, pid, status, flags);
+
+    if (auto err = syscall_error(res))
+        return err;
+
+    if (ret_pid)
+        *ret_pid = syscall_result<pid_t>(res);
+
+    return 0;
+}
+
+int sys_gethostname(char *buffer, size_t bufsize) {
+    memcpy(buffer, "zigux", 5);
+    return 0;
+}
+
+}
